#include <iostream>
using namespace std;
long product = 1;
static int z=1;

int gcd(int a, int b)
{
    if(a == '0' || a == 0)
    return b;
    while(a!=b)
    {
        if(a > b)
            a -= b;
        else
            b -= a;
    }
    return a;
}

int findGCD(int arr[], int n)                 
{   
    int result = arr[0];
    for (int i=1; i<n; i++)
    {
        result = gcd(arr[i], result);         //calculates gcd of two numbers at a time
    }
    return result;
}


int recursion(int i, int arr[], int a[], int n)
{  
    int x,j,k,l;
    for(j=i+1;j<n;j++)
    {
        a[z++] = arr[j];
        
        x = findGCD(a,n);                  //calculates gcd of particular subset
        product *= x;
        recursion(j, arr, a, n);
        z--;
        a[j] = 0;
        a[j+1] = 0;
    }
}

int main()
{
	int i,n,t;
	long answer;
	int arr[n],a[n];       //array of integers
	cin>>t;

	while(t--)   //for T test cases
	{ 
	    
	    cin>>n;
	    product = 1;
	    for(int k=0;k<n;k++)
	    cin>>arr[k];             //array of numbers
	for(i=0;i<n;i++)
    {
        product *= arr[i];       //taking products of individual digits
        a[0] = arr[i];
        recursion(i,arr,a,n);    //recursive call to find other subsets
    }
    answer=product%1000000007;
    cout<<product<<endl;
    for(int b=0;b<n;b++)
    arr[b]=0;
    for(int b=0;b<n;b++)
    a[b]=0;
    
	}
    return 0;
}
